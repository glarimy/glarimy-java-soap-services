
package com.glarimy.bank;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Bank", targetNamespace = "http://www.glarimy.com/bank")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Bank {


    /**
     * 
     * @param customer
     * @return
     *     returns javax.xml.ws.Response<com.glarimy.bank.OpenAccountForResponse>
     */
    @WebMethod(operationName = "openAccountFor", action = "http://www.glarimy.com/bank/openAccountFor")
    @RequestWrapper(localName = "openAccountFor", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.OpenAccountFor")
    @ResponseWrapper(localName = "openAccountForResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.OpenAccountForResponse")
    public Response<OpenAccountForResponse> openAccountForAsync(
        @WebParam(name = "customer", targetNamespace = "http://www.glarimy.com/bank")
        Customer customer);

    /**
     * 
     * @param asyncHandler
     * @param customer
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "openAccountFor", action = "http://www.glarimy.com/bank/openAccountFor")
    @RequestWrapper(localName = "openAccountFor", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.OpenAccountFor")
    @ResponseWrapper(localName = "openAccountForResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.OpenAccountForResponse")
    public Future<?> openAccountForAsync(
        @WebParam(name = "customer", targetNamespace = "http://www.glarimy.com/bank")
        Customer customer,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<OpenAccountForResponse> asyncHandler);

    /**
     * 
     * @param customer
     * @return
     *     returns int
     */
    @WebMethod(action = "http://www.glarimy.com/bank/openAccountFor")
    @WebResult(name = "no", targetNamespace = "http://www.glarimy.com/bank")
    @RequestWrapper(localName = "openAccountFor", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.OpenAccountFor")
    @ResponseWrapper(localName = "openAccountForResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.OpenAccountForResponse")
    public int openAccountFor(
        @WebParam(name = "customer", targetNamespace = "http://www.glarimy.com/bank")
        Customer customer);

    /**
     * 
     * @param no
     * @param amount
     * @return
     *     returns javax.xml.ws.Response<com.glarimy.bank.DepositResponse>
     */
    @WebMethod(operationName = "deposit", action = "http://www.glarimy.com/bank/deposit")
    @RequestWrapper(localName = "deposit", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Deposit")
    @ResponseWrapper(localName = "depositResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.DepositResponse")
    public Response<DepositResponse> depositAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "amount", targetNamespace = "http://www.glarimy.com/bank")
        double amount);

    /**
     * 
     * @param no
     * @param amount
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deposit", action = "http://www.glarimy.com/bank/deposit")
    @RequestWrapper(localName = "deposit", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Deposit")
    @ResponseWrapper(localName = "depositResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.DepositResponse")
    public Future<?> depositAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "amount", targetNamespace = "http://www.glarimy.com/bank")
        double amount,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DepositResponse> asyncHandler);

    /**
     * 
     * @param no
     * @param amount
     * @return
     *     returns double
     */
    @WebMethod(action = "http://www.glarimy.com/bank/deposit")
    @WebResult(name = "balance", targetNamespace = "http://www.glarimy.com/bank")
    @RequestWrapper(localName = "deposit", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Deposit")
    @ResponseWrapper(localName = "depositResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.DepositResponse")
    public double deposit(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "amount", targetNamespace = "http://www.glarimy.com/bank")
        double amount);

    /**
     * 
     * @param no
     * @param amount
     * @return
     *     returns javax.xml.ws.Response<com.glarimy.bank.WithdrawResponse>
     */
    @WebMethod(operationName = "withdraw", action = "http://www.glarimy.com/bank/withdraw")
    @RequestWrapper(localName = "withdraw", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Withdraw")
    @ResponseWrapper(localName = "withdrawResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.WithdrawResponse")
    public Response<WithdrawResponse> withdrawAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "amount", targetNamespace = "http://www.glarimy.com/bank")
        double amount);

    /**
     * 
     * @param no
     * @param amount
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "withdraw", action = "http://www.glarimy.com/bank/withdraw")
    @RequestWrapper(localName = "withdraw", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Withdraw")
    @ResponseWrapper(localName = "withdrawResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.WithdrawResponse")
    public Future<?> withdrawAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "amount", targetNamespace = "http://www.glarimy.com/bank")
        double amount,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<WithdrawResponse> asyncHandler);

    /**
     * 
     * @param no
     * @param amount
     * @return
     *     returns double
     */
    @WebMethod(action = "http://www.glarimy.com/bank/withdraw")
    @WebResult(name = "balance", targetNamespace = "http://www.glarimy.com/bank")
    @RequestWrapper(localName = "withdraw", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Withdraw")
    @ResponseWrapper(localName = "withdrawResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.WithdrawResponse")
    public double withdraw(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "amount", targetNamespace = "http://www.glarimy.com/bank")
        double amount);

    /**
     * 
     * @param no
     * @return
     *     returns javax.xml.ws.Response<com.glarimy.bank.FindResponse>
     */
    @WebMethod(operationName = "find", action = "http://www.glarimy.com/bank/find")
    @RequestWrapper(localName = "find", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Find")
    @ResponseWrapper(localName = "findResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.FindResponse")
    public Response<FindResponse> findAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no);

    /**
     * 
     * @param no
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "find", action = "http://www.glarimy.com/bank/find")
    @RequestWrapper(localName = "find", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Find")
    @ResponseWrapper(localName = "findResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.FindResponse")
    public Future<?> findAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<FindResponse> asyncHandler);

    /**
     * 
     * @param no
     * @return
     *     returns com.glarimy.bank.Account
     */
    @WebMethod(action = "http://www.glarimy.com/bank/find")
    @WebResult(name = "account", targetNamespace = "http://www.glarimy.com/bank")
    @RequestWrapper(localName = "find", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.Find")
    @ResponseWrapper(localName = "findResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.FindResponse")
    public Account find(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no);

    /**
     * 
     * @param no
     * @return
     *     returns javax.xml.ws.Response<com.glarimy.bank.HistoryResponse>
     */
    @WebMethod(operationName = "history", action = "http://www.glarimy.com/bank/history")
    @RequestWrapper(localName = "history", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.History")
    @ResponseWrapper(localName = "historyResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.HistoryResponse")
    public Response<HistoryResponse> historyAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no);

    /**
     * 
     * @param no
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "history", action = "http://www.glarimy.com/bank/history")
    @RequestWrapper(localName = "history", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.History")
    @ResponseWrapper(localName = "historyResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.HistoryResponse")
    public Future<?> historyAsync(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<HistoryResponse> asyncHandler);

    /**
     * 
     * @param no
     * @return
     *     returns java.util.List<com.glarimy.bank.Transaction>
     */
    @WebMethod(action = "http://www.glarimy.com/bank/history")
    @WebResult(name = "transaction", targetNamespace = "http://www.glarimy.com/bank")
    @RequestWrapper(localName = "history", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.History")
    @ResponseWrapper(localName = "historyResponse", targetNamespace = "http://www.glarimy.com/bank", className = "com.glarimy.bank.HistoryResponse")
    public List<Transaction> history(
        @WebParam(name = "no", targetNamespace = "http://www.glarimy.com/bank")
        int no);

}
